/* automatically generated by rust-bindgen 0.69.5 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tQueueHandleType {
    _unused: [u8; 0],
}
pub type tQueueHandle = *mut tQueueHandleType;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct tXcpOdt {
    pub first_odt_entry: u16,
    pub last_odt_entry: u16,
    pub size: u16,
    pub res: u16,
}
#[test]
fn bindgen_test_layout_tXcpOdt() {
    const UNINIT: ::std::mem::MaybeUninit<tXcpOdt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<tXcpOdt>(), 8usize, concat!("Size of: ", stringify!(tXcpOdt)));
    assert_eq!(::std::mem::align_of::<tXcpOdt>(), 1usize, concat!("Alignment of ", stringify!(tXcpOdt)));
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_odt_entry) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(tXcpOdt), "::", stringify!(first_odt_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_odt_entry) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(tXcpOdt), "::", stringify!(last_odt_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(tXcpOdt), "::", stringify!(size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).res) as usize - ptr as usize },
        6usize,
        concat!("Offset of field: ", stringify!(tXcpOdt), "::", stringify!(res))
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct tXcpDaqList {
    pub last_odt: u16,
    pub first_odt: u16,
    pub event_channel: u16,
    pub res1: u16,
    pub mode: u8,
    pub state: u8,
    pub priority: u8,
    pub addr_ext: u8,
}
#[test]
fn bindgen_test_layout_tXcpDaqList() {
    const UNINIT: ::std::mem::MaybeUninit<tXcpDaqList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<tXcpDaqList>(), 12usize, concat!("Size of: ", stringify!(tXcpDaqList)));
    assert_eq!(::std::mem::align_of::<tXcpDaqList>(), 1usize, concat!("Alignment of ", stringify!(tXcpDaqList)));
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_odt) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(tXcpDaqList), "::", stringify!(last_odt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_odt) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(tXcpDaqList), "::", stringify!(first_odt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event_channel) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(tXcpDaqList), "::", stringify!(event_channel))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).res1) as usize - ptr as usize },
        6usize,
        concat!("Offset of field: ", stringify!(tXcpDaqList), "::", stringify!(res1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(tXcpDaqList), "::", stringify!(mode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        9usize,
        concat!("Offset of field: ", stringify!(tXcpDaqList), "::", stringify!(state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        10usize,
        concat!("Offset of field: ", stringify!(tXcpDaqList), "::", stringify!(priority))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr_ext) as usize - ptr as usize },
        11usize,
        concat!("Offset of field: ", stringify!(tXcpDaqList), "::", stringify!(addr_ext))
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct tXcpDaqLists {
    pub odt_entry_count: u16,
    pub odt_count: u16,
    pub daq_count: u16,
    pub res: u16,
    pub config_id: u16,
    pub res1: u16,
    pub u: tXcpDaqLists__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union tXcpDaqLists__bindgen_ty_1 {
    pub daq_list: [tXcpDaqList; 1250usize],
    pub odt: [tXcpOdt; 1875usize],
    pub odt_entry_addr: [u32; 3750usize],
    pub odt_entry_size: [u8; 15000usize],
    pub b: [u64; 1876usize],
}
#[test]
fn bindgen_test_layout_tXcpDaqLists__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<tXcpDaqLists__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tXcpDaqLists__bindgen_ty_1>(),
        15008usize,
        concat!("Size of: ", stringify!(tXcpDaqLists__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<tXcpDaqLists__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(tXcpDaqLists__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).daq_list) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(tXcpDaqLists__bindgen_ty_1), "::", stringify!(daq_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).odt) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(tXcpDaqLists__bindgen_ty_1), "::", stringify!(odt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).odt_entry_addr) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(tXcpDaqLists__bindgen_ty_1), "::", stringify!(odt_entry_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).odt_entry_size) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(tXcpDaqLists__bindgen_ty_1), "::", stringify!(odt_entry_size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(tXcpDaqLists__bindgen_ty_1), "::", stringify!(b))
    );
}
#[test]
fn bindgen_test_layout_tXcpDaqLists() {
    const UNINIT: ::std::mem::MaybeUninit<tXcpDaqLists> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<tXcpDaqLists>(), 15020usize, concat!("Size of: ", stringify!(tXcpDaqLists)));
    assert_eq!(::std::mem::align_of::<tXcpDaqLists>(), 1usize, concat!("Alignment of ", stringify!(tXcpDaqLists)));
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).odt_entry_count) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(tXcpDaqLists), "::", stringify!(odt_entry_count))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).odt_count) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(tXcpDaqLists), "::", stringify!(odt_count))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).daq_count) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(tXcpDaqLists), "::", stringify!(daq_count))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).res) as usize - ptr as usize },
        6usize,
        concat!("Offset of field: ", stringify!(tXcpDaqLists), "::", stringify!(res))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config_id) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(tXcpDaqLists), "::", stringify!(config_id))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).res1) as usize - ptr as usize },
        10usize,
        concat!("Offset of field: ", stringify!(tXcpDaqLists), "::", stringify!(res1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(tXcpDaqLists), "::", stringify!(u))
    );
}
extern "C" {
    pub fn XcpInit(daq_lists: *mut tXcpDaqLists);
}
extern "C" {
    pub fn XcpDisconnect();
}
extern "C" {
    pub fn XcpTriggerDaqEventAt(daq_lists: *const tXcpDaqLists, queueHandle: tQueueHandle, event: u16, base: *const u8, clock: u64);
}
extern "C" {
    pub fn XcpEventExt(event: u16, base: *const u8) -> u8;
}
extern "C" {
    pub fn XcpEvent(event: u16);
}
extern "C" {
    pub fn XcpSendTerminateSessionEvent();
}
extern "C" {
    pub fn XcpPrint(str_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn ApplXcpGetAddr(p: *const u8) -> u32;
}
extern "C" {
    pub fn XcpEthTlGetInfo(isTCP: *mut bool, mac: *mut u8, addr: *mut u8, port: *mut u16);
}
extern "C" {
    pub fn XcpEthServerInit(addr: *const u8, port: u16, useTCP: bool, queueSize: u32) -> bool;
}
extern "C" {
    pub fn XcpEthServerShutdown() -> bool;
}
extern "C" {
    pub fn XcpEthServerStatus() -> bool;
}
extern "C" {
    pub fn ApplXcpSetLogLevel(level: u8);
}
extern "C" {
    pub fn ApplXcpRegisterCallbacks(
        cb_connect: ::std::option::Option<unsafe extern "C" fn() -> u8>,
        cb_prepare_daq: ::std::option::Option<unsafe extern "C" fn(daq: *const tXcpDaqLists) -> u8>,
        cb_start_daq: ::std::option::Option<unsafe extern "C" fn(daq: *const tXcpDaqLists) -> u8>,
        cb_stop_daq: ::std::option::Option<unsafe extern "C" fn()>,
        cb_freeze_daq: ::std::option::Option<unsafe extern "C" fn(clear: u8, config_id: u16) -> u8>,
        cb_get_cal_page: ::std::option::Option<unsafe extern "C" fn(segment: u8, mode: u8) -> u8>,
        cb_set_cal_page: ::std::option::Option<unsafe extern "C" fn(segment: u8, page: u8, mode: u8) -> u8>,
        cb_freeze_cal: ::std::option::Option<unsafe extern "C" fn() -> u8>,
        cb_init_cal: ::std::option::Option<unsafe extern "C" fn(src_page: u8, dst_page: u8) -> u8>,
        cb_read: ::std::option::Option<unsafe extern "C" fn(src: u32, size: u8, dst: *mut u8) -> u8>,
        cb_write: ::std::option::Option<unsafe extern "C" fn(dst: u32, size: u8, src: *const u8, delay: u8) -> u8>,
        cb_flush: ::std::option::Option<unsafe extern "C" fn() -> u8>,
    );
}
extern "C" {
    pub fn ApplXcpSetA2lName(name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn ApplXcpSetEpk(name: *const ::std::os::raw::c_char);
}
